// Define padding (with fallback).
// This is only necessary to use if you want to provide fallbacks when you are
// using rem as $base-unit.
//
// @param number|list $x
//   Multiple of line height to be used or px value to be converted.
//   Uses the same parameters as the CSS padding property:
//   i.e. top right bottom left, 1 0 2 0.
// @param number|string $context
//   (optional) Only used if em is the $base-unit. The value of the elements/parents
//   font-size if it differs from $base-font-size. Specified as a t-shirt size or
//   value in px.
@mixin padding($list, $context: $base-font-size) {
  $allowed-types: "multiplier", "px", "list";
  $type: typey-validator($list, $allowed-types);

  $px-list: ();
  $converted-list: ();

  @each $x in $list {
    @if $base-unit == rem {
      $allowed-types: "multiplier", "px";
      $type: typey-validator($x, $allowed-types);
      @if $type == "multiplier" {
        $padding: $x * $base-line-height;
        $px-list: join($px-list, $padding, $separator: space);
      }
      @if $type == "px" {
        $px-list: join($px-list, $x, $separator: space);
      }
    }
    $padding: padding($x, $context);
    $converted-list: join($converted-list, $padding, $separator: space);
  }

  @if $base-unit == rem {
    @if $rem-fallback == true {
      padding: $px-list;
    }
  }
  padding: $converted-list;
}

// Define padding-top (with fallback).
// This is only necessary to use if you want to provide fallbacks when you are
// using rem as $base-unit.
//
// @param number $x
//   Multiple of line height to be used or px value to be converted.
// @param number|string $context
//   (optional) Only used if em is the $base-unit. The value of the elements/parents
//   font-size if it differs from $base-font-size. Specified as a t-shirt size or
//   value in px.
@mixin padding-top($x, $context: $base-font-size) {
  $allowed-types: "multiplier", "px";
  $type: typey-validator($x, $allowed-types);
  @if $base-unit == rem {
    @if $rem-fallback == true {
      @if $type == "multiplier" {
        padding-top: $x * $base-line-height;
      }
      @if $type == "px" {
        padding-top: $x;
      }
    }
  }
  padding-top: padding($x, $context);
}

// Define padding-bottom (with fallback).
// This is only necessary to use if you want to provide fallbacks when you are
// using rem as $base-unit.
//
// @param number $x
//   Multiple of line height to be used or px value to be converted.
// @param number|string $context
//   (optional) Only used if em is the $base-unit. The value of the elements/parents
//   font-size if it differs from $base-font-size. Specified as a t-shirt size or
//   value in px.
@mixin padding-bottom($x, $context: $base-font-size) {
  $allowed-types: "multiplier", "px";
  $type: typey-validator($x, $allowed-types);
  @if $base-unit == rem {
    @if $rem-fallback == true {
      @if $type == "multiplier" {
        padding-bottom: $x * $base-line-height;
      }
      @if $type == "px" {
        padding-bottom: $x;
      }
    }
  }
  padding-bottom: padding($x, $context);
}

// Define padding-left (with fallback).
// This is only necessary to use if you want to provide fallbacks when you are
// using rem as $base-unit.
//
// @param number $x
//   Multiple of line height to be used or px value to be converted.
// @param number|string $context
//   (optional) Only used if em is the $base-unit. The value of the elements/parents
//   font-size if it differs from $base-font-size. Specified as a t-shirt size or
//   value in px.
@mixin padding-left($x, $context: $base-font-size) {
  $allowed-types: "multiplier", "px";
  $type: typey-validator($x, $allowed-types);
  @if $base-unit == rem {
    @if $rem-fallback == true {
      @if $type == "multiplier" {
        padding-left: $x * $base-line-height;
      }
      @if $type == "px" {
        padding-left: $x;
      }
    }
  }
  padding-left: padding($x, $context);
}

// Define padding-right (with fallback).
// This is only necessary to use if you want to provide fallbacks when you are
// using rem as $base-unit.
//
// @param number $x
//   Multiple of line height to be used or px value to be converted.
// @param number|string $context
//   (optional) Only used if em is the $base-unit. The value of the elements/parents
//   font-size if it differs from $base-font-size. Specified as a t-shirt size or
//   value in px.
@mixin padding-right($x, $context: $base-font-size) {
  $allowed-types: "multiplier", "px";
  $type: typey-validator($x, $allowed-types);
  @if $base-unit == rem {
    @if $rem-fallback == true {
      @if $type == "multiplier" {
        padding-right: $x * $base-line-height;
      }
      @if $type == "px" {
        padding-right: $x;
      }
    }
  }
  padding-right: padding($x, $context);
}
